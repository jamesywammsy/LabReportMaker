//Compile.java
//Compile menu, exports a word document
//Made by James Zhang and Maggie Pang
//Last edit: Jan 15

//TODO: Finish the rest of the buttons; Add in the ordering feature; Add in preview feature

//imports
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import java.io.FileOutputStream;
import java.io.IOException;

public class Compile extends JFrame implements ActionListener {

	// final variables
	private static final int PANEL_WIDTH = 700;
	private static final int PANEL_HEIGHT = 700;
	private static final int BUTTON_WIDTH = 150;
	private static final int BUTTON_HEIGHT = 50;

	// button variables
	JButton return_;
	JButton save_;
	JButton download_;

	// object declarations
	Menu menu;
	General general;
	CreateTable table1;
	CreateTable table2;
	CreateTable table3;
	CreateTable table4;
	CreateTable table5;
	CreateTable table6;
	CreateTable table7;
	CreateTable table8;

	private int r;
	private int c;

	public Compile(Menu menu, General general, CreateTable table1, CreateTable table2, CreateTable table3,
			CreateTable table4, CreateTable table5, CreateTable table6, CreateTable table7, CreateTable table8) {

		this.menu = menu;
		this.general = general;
		this.table1 = table1;
		this.table2 = table2;
		this.table3 = table3;
		this.table4 = table4;
		this.table5 = table5;
		this.table6 = table6;
		this.table7 = table7;
		this.table8 = table8;

		// panel sizing
		this.setTitle("GHHSB Lab Report System - Compile");
		this.setSize(PANEL_WIDTH, PANEL_HEIGHT);
		this.setResizable(false);
		this.setLocationRelativeTo(null);
		this.setFocusable(true); // make everything in this class appear on the screen
		this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		this.getContentPane().setBackground(Color.WHITE);
		HideWindow();

		Container c = getContentPane();
		c.setLayout(null);

		// button instantiations
		return_ = new JButton("Return");
		return_.addActionListener(this);
		return_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
		return_.setLocation(50, 600);

		save_ = new JButton("Save");
		save_.addActionListener(this);
		save_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
		save_.setLocation(275, 600);

		download_ = new JButton("Download");
		download_.addActionListener(this);
		download_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
		download_.setLocation(500, 600);

		// adds buttons
		c.add(return_);
		c.add(save_);
		c.add(download_);

		repaint();
	}

	public void paint(Graphics g) {

		super.paint(g);

	}

	public void HideWindow() {
		setVisible(false);
	}

	public void ShowWindow() {
		setVisible(true);
	}

	public void CompileParagraph(XWPFDocument doc, String paragraph) {

		// Create a paragraph
		XWPFParagraph para = doc.createParagraph();

		// Create a run within the paragraphÂ 
		XWPFRun run = para.createRun();

		// Add text to the run
		run.setText(paragraph);
	}

	public void CompileTable(XWPFDocument doc, String[][] tableData, int row, int col) {

		// create table
		XWPFTable table = doc.createTable();

		if (row >= 1) {

			// create first row
			XWPFTableRow tableRowOne = table.getRow(0);
			tableRowOne.getCell(0).setText(tableData[0][0]);

			for (int i = 1; i < col; i++) {
				tableRowOne.addNewTableCell().setText(tableData[0][i]);
			}
		}

		if (row >= 92) {
			// create second row
			XWPFTableRow tableRowTwo = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowTwo.getCell(i).setText(tableData[1][i]);
			}

		}

		if (row >= 3) {
			// create third row
			XWPFTableRow tableRowThree = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowThree.getCell(i).setText(tableData[2][i]);
			}
		}

		if (row >= 4) {
			// create fourth row
			XWPFTableRow tableRowFour = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowFour.getCell(i).setText(tableData[3][i]);
			}
		}

		if (row >= 5) {
			// create third row
			XWPFTableRow tableRowFive = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowFive.getCell(i).setText(tableData[4][i]);
			}
		}

		if (row >= 6) {
			// create third row
			XWPFTableRow tableRowSix = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowSix.getCell(i).setText(tableData[5][i]);
			}
		}

		if (row >= 7) {
			// create third row
			XWPFTableRow tableRowSeven = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowSeven.getCell(i).setText(tableData[6][i]);
			}
		}

		if (row >= 8) {
			// create third row
			XWPFTableRow tableRowEight = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowEight.getCell(i).setText(tableData[7][i]);
			}
		}

		if (row >= 9) {
			// create third row
			XWPFTableRow tableRowNine = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowNine.getCell(i).setText(tableData[8][i]);
			}
		}

		if (row >= 10) {
			// create third row
			XWPFTableRow tableRowTen = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowTen.getCell(i).setText(tableData[9][i]);
			}
		}
	}
	
	public void CompileTable1(XWPFDocument document) {
		if (table1 != null) {

			if (table1.row.equals("")) {
				r = 0;
			} else {
				r = Integer.parseInt(table1.row);
			}

			if (table1.col.equals("")) {
				c = 0;
			}

			else {
				c = Integer.parseInt(table1.col);
			}

			CompileTable(document, table1.data, r, c);

		}
	}
	
	public void CompileTable2(XWPFDocument document) {
		if (table2 != null) {

			if (table2.row.equals("")) {
				r = 0;
			} else {
				r = Integer.parseInt(table2.row);
			}

			if (table2.col.equals("")) {
				c = 0;
			}

			else {
				c = Integer.parseInt(table2.col);
			}

			CompileTable(document, table2.data, r, c);

		}
	}
	
	public void CompileTable3(XWPFDocument document) {
		if (table3 != null) {

		    if (table3.row.equals("")) {
		        r = 0;
		    } else {
		        r = Integer.parseInt(table3.row);
		    }

		    if (table3.col.equals("")) {
		        c = 0;
		    } else {
		        c = Integer.parseInt(table3.col);
		    }

		    CompileTable(document, table3.data, r, c);

		}
	}
	
	public void CompileTable4(XWPFDocument document) {
		if (table4 != null) {

		    if (table4.row.equals("")) {
		        r = 0;
		    } else {
		        r = Integer.parseInt(table4.row);
		    }

		    if (table4.col.equals("")) {
		        c = 0;
		    } else {
		        c = Integer.parseInt(table4.col);
		    }

		    CompileTable(document, table4.data, r, c);

		}
	}
	
	public void CompileTable5(XWPFDocument document) {
		if (table5 != null) {

		    if (table5.row.equals("")) {
		        r = 0;
		    } else {
		        r = Integer.parseInt(table5.row);
		    }

		    if (table5.col.equals("")) {
		        c = 0;
		    } else {
		        c = Integer.parseInt(table5.col);
		    }

		    CompileTable(document, table5.data, r, c);

		}
	}
	
	public void CompileTable6(XWPFDocument document) {

		if (table6 != null) {

		    if (table6.row.equals("")) {
		        r = 0;
		    } else {
		        r = Integer.parseInt(table6.row);
		    }

		    if (table6.col.equals("")) {
		        c = 0;
		    } else {
		        c = Integer.parseInt(table6.col);
		    }

		    CompileTable(document, table6.data, r, c);

		}
	}
	
	public void CompileTable7(XWPFDocument document) {

		if (table7 != null) {

		    if (table7.row.equals("")) {
		        r = 0;
		    } else {
		        r = Integer.parseInt(table7.row);
		    }

		    if (table7.col.equals("")) {
		        c = 0;
		    } else {
		        c = Integer.parseInt(table7.col);
		    }

		    CompileTable(document, table7.data, r, c);

		}
	}
	
	public void CompileTable8(XWPFDocument document) {
		
		if (table8 != null) {

		    if (table8.row.equals("")) {
		        r = 0;
		    } else {
		        r = Integer.parseInt(table8.row);
		    }

		    if (table8.col.equals("")) {
		        c = 0;
		    } else {
		        c = Integer.parseInt(table8.col);
		    }

		    CompileTable(document, table8.data, r, c);

		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {

		// opens each different class
		if (e.getSource() == return_) {

			HideWindow();
			menu.ShowWindow();

		} else if (e.getSource() == save_) {

			HideWindow();

		} else if (e.getSource() == download_) {

			try {
				// Create a new Word document
				XWPFDocument document = new XWPFDocument();

				// Create a paragraph
				XWPFParagraph paragraph = document.createParagraph();

				// Create a run within the paragraph
				XWPFRun run = paragraph.createRun();

				// Add text to the run
				run.setText("Hello, this is a sample document!");

				CompileParagraph(document, general.input);
				
				CompileTable1(document);
				CompileTable2(document);
				CompileTable3(document);
				CompileTable4(document);
				CompileTable5(document);
				CompileTable6(document);
				CompileTable7(document);
				CompileTable8(document);

				// Specify the output file path in the Downloads folder
				String home = System.getProperty("user.home");
				String filePath = home + "/Downloads/Lab Report.docx";

				// Create a FileOutputStream to write the document to a file
				try (FileOutputStream out = new FileOutputStream(filePath)) {
					// Write the document to the file
					document.write(out);
				}

			} catch (IOException ex) {
				ex.printStackTrace();
			}

			System.exit(0);

		}
	}

}
