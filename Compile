//Compile.java
//Compile menu, exports a docx document
//Made by James Zhang and Maggie Pang
//Last edit: Jan 21

//imports
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import java.awt.*;

import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import java.io.FileOutputStream;
import java.io.IOException;

public class Compile extends JFrame implements ActionListener {

	// final variables
	private static final int PANEL_WIDTH = 700;
	private static final int PANEL_HEIGHT = 700;
	private static final int BUTTON_WIDTH = 150;
	private static final int BUTTON_HEIGHT = 50;

	public String title;
	public String contributors;
	public boolean[] selected = new boolean[16];
	public boolean dataSelect = false;
	public boolean analysisSelect = false;
	public boolean unorderedSelect = false;

	Point[] u = new Point[] { new Point(370, 120), new Point(530, 120), new Point(370, 180), new Point(530, 180),
			new Point(370, 240), new Point(530, 240), new Point(370, 300), new Point(530, 300), new Point(370, 360),
			new Point(530, 360), new Point(370, 420), new Point(530, 420), new Point(370, 480), new Point(530, 480),
			new Point(370, 540), new Point(530, 540), new Point(370, 600), new Point(530, 600) };

	Point[] d = new Point[] { new Point(20, 120), new Point(20, 180), new Point(20, 240), new Point(20, 300),
			new Point(20, 360), new Point(20, 420), new Point(20, 480), new Point(20, 540), new Point(20, 600),
			new Point(20, 660), new Point(20, 720), new Point(20, 780), new Point(20, 840), new Point(20, 900),
			new Point(20, 960), new Point(20, 1020) };

	Point[] a = new Point[] { new Point(180, 120), new Point(180, 180), new Point(180, 240), new Point(180, 300),
			new Point(180, 360), new Point(180, 420), new Point(180, 480), new Point(180, 540), new Point(180, 600),
			new Point(180, 660), new Point(180, 720), new Point(180, 780), new Point(180, 840), new Point(180, 900),
			new Point(180, 960), new Point(180, 1020) };

	String[] uSection = new String[16];
	String[] dSection = new String[16];
	String[] aSection = new String[16];

	JTextField title_;
	JLabel titleLabel;
	JButton data_;
	JButton analysis_;
	JButton unordered_;

	// button variables
	JButton return_;
	JButton download_;

	JButton data;
	JButton analysis;

	JButton table1_;
	JButton table2_;
	JButton table3_;
	JButton table4_;
	JButton table5_;
	JButton table6_;
	JButton table7_;
	JButton table8_;

	JButton para1_;
	JButton para2_;
	JButton para3_;
	JButton para4_;
	JButton para5_;
	JButton para6_;
	JButton para7_;
	JButton para8_;

	JScrollPane scroll;

	// object declarations
	Menu menu;
	Abstract abstract_;
	Method method;

	Formula[] formulas;

	CreateTable table1;
	CreateTable table2;
	CreateTable table3;
	CreateTable table4;
	CreateTable table5;
	CreateTable table6;
	CreateTable table7;
	CreateTable table8;

	CreatePara para1;
	CreatePara para2;
	CreatePara para3;
	CreatePara para4;
	CreatePara para5;
	CreatePara para6;
	CreatePara para7;
	CreatePara para8;

	SourcesOfError sourcesoferror;
	Conclusion conclusion;
	Citations citations;

	private int r;
	private int c;

	public Compile(Menu menu, Abstract abstract_, Method method, Formula[] formulas, CreateTable table1, CreateTable table2,
			CreateTable table3, CreateTable table4, CreateTable table5, CreateTable table6, CreateTable table7,
			CreateTable table8, CreatePara para1, CreatePara para2, CreatePara para3, CreatePara para4,
			CreatePara para5, CreatePara para6, CreatePara para7, CreatePara para8, SourcesOfError sourcesoferror,
			Conclusion conclusion, Citations citations) {

		this.menu = menu;
		this.abstract_ = abstract_;
		this.method = method;
		this.formulas=formulas;
		this.table1 = table1;
		this.table2 = table2;
		this.table3 = table3;
		this.table4 = table4;
		this.table5 = table5;
		this.table6 = table6;
		this.table7 = table7;
		this.table8 = table8;

		this.para1 = para1;
		this.para2 = para2;
		this.para3 = para3;
		this.para4 = para4;
		this.para5 = para5;
		this.para6 = para6;
		this.para7 = para7;
		this.para8 = para8;

		this.sourcesoferror = sourcesoferror;
		this.conclusion = conclusion;
		this.citations = citations;

		title = menu.title;
		contributors = menu.contributors;

		// window sizing
		this.setTitle("GHHSB Lab Report System - Compile");
		this.setSize(PANEL_WIDTH, PANEL_HEIGHT);
		this.setResizable(false);
		this.setLocationRelativeTo(null);
		this.setFocusable(true); // make everything in this class appear on the screen
		this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		this.getContentPane().setBackground(Color.WHITE);
		HideWindow();

		JPanel c = new JPanel();
		c.setLayout(null);
		c.setPreferredSize(new Dimension(PANEL_WIDTH, (int) (PANEL_HEIGHT * 1.6)));

		scroll = new JScrollPane(c);
		scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scroll.getViewport().setPreferredSize(new Dimension(PANEL_WIDTH, PANEL_HEIGHT - 200));

		// text field instantiations
		title_ = new JTextField();
		title_.setEditable(false);
		title_.setSize(300, 35);
		title_.setLocation(240, 10);

		// jlabel instantiations
		titleLabel = new JLabel("Title:");
		titleLabel.setSize(400, 20);
		titleLabel.setLocation(165, 20);
		titleLabel.setFont(new Font("Serif", Font.PLAIN, 20));

		data_ = new JButton("Data:");
		data_.addActionListener(this);
		data_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
		data_.setLocation(20, 60);

		analysis_ = new JButton("Analysis:");
		analysis_.addActionListener(this);
		analysis_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
		analysis_.setLocation(180, 60);

		unordered_ = new JButton("Unordered:");
		unordered_.addActionListener(this);
		unordered_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
		unordered_.setLocation(450, 60);

		// button instantiations
		return_ = new JButton("Return");
		return_.addActionListener(this);
		return_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
		return_.setLocation(450, 600);

		download_ = new JButton("Download");
		download_.addActionListener(this);
		download_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
		download_.setLocation(450, 660);

		if (this.table1 != null) {
			table1_ = new JButton("Table 1");
			table1_.addActionListener(this);
			table1_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			table1_.setLocation(u[0]);
			c.add(table1_);
		}

		if (this.table2 != null) {
			table2_ = new JButton("Table 2");
			table2_.addActionListener(this);
			table2_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			table2_.setLocation(u[1]);
			c.add(table2_);
		}

		if (this.table3 != null) {
			table3_ = new JButton("Table 3");
			table3_.addActionListener(this);
			table3_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			table3_.setLocation(u[2]);
			c.add(table3_);
		}

		if (this.table4 != null) {
			table4_ = new JButton("Table 4");
			table4_.addActionListener(this);
			table4_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			table4_.setLocation(u[3]);
			c.add(table4_);
		}

		if (this.table5 != null) {
			table5_ = new JButton("Table 5");
			table5_.addActionListener(this);
			table5_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			table5_.setLocation(u[4]);
			c.add(table5_);
		}

		if (this.table6 != null) {
			table6_ = new JButton("Table 6");
			table6_.addActionListener(this);
			table6_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			table6_.setLocation(u[5]);
			c.add(table6_);
		}

		if (this.table7 != null) {
			table7_ = new JButton("Table 7");
			table7_.addActionListener(this);
			table7_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			table7_.setLocation(u[6]);
			c.add(table7_);
		}

		if (this.table8 != null) {
			table8_ = new JButton("Table 8");
			table8_.addActionListener(this);
			table8_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			table8_.setLocation(u[7]);
			c.add(table8_);
		}

		if (this.para1 != null) {
			para1_ = new JButton("Para 1");
			para1_.addActionListener(this);
			para1_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			para1_.setLocation(u[8]);
			c.add(para1_);
		}

		if (this.para2 != null) {
			para2_ = new JButton("Para 2");
			para2_.addActionListener(this);
			para2_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			para2_.setLocation(u[9]);
			c.add(para2_);
		}

		if (this.para3 != null) {
			para3_ = new JButton("Para 3");
			para3_.addActionListener(this);
			para3_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			para3_.setLocation(u[10]);
			c.add(para3_);
		}

		if (this.para4 != null) {
			para4_ = new JButton("Para 4");
			para4_.addActionListener(this);
			para4_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			para4_.setLocation(u[11]);
			c.add(para4_);
		}

		if (this.para5 != null) {
			para5_ = new JButton("Para 5");
			para5_.addActionListener(this);
			para5_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			para5_.setLocation(u[12]);
			c.add(para5_);
		}

		if (this.para6 != null) {
			para6_ = new JButton("Para 6");
			para6_.addActionListener(this);
			para6_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			para6_.setLocation(u[13]);
			c.add(para6_);
		}

		if (this.para7 != null) {
			para7_ = new JButton("Para 7");
			para7_.addActionListener(this);
			para7_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			para7_.setLocation(u[14]);
			c.add(para7_);
		}

		if (this.para8 != null) {
			para8_ = new JButton("Para 8");
			para8_.addActionListener(this);
			para8_.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			para8_.setLocation(u[15]);
			c.add(para8_);
		}

		// adds buttons
		c.add(return_);
		c.add(download_);
		c.add(titleLabel);
		c.add(title_);

		c.add(analysis_);
		c.add(data_);
		c.add(unordered_);

		this.getContentPane().add(scroll);
		repaint();
	}

	public void paint(Graphics g) {

		super.paint(g);

	}

	public void HideWindow() {
		setVisible(false);
	}

	public void ShowWindow() {
		setVisible(true);
	}

	public void DisplayTableTitle(CreateTable table) {
		title_.setText(table.title);
	}

	public void DisplayParaTitle(CreatePara para) {
		title_.setText(para.title);
	}

	public void CompileTitlePage(XWPFDocument doc) {

		// Create a paragraph
		XWPFParagraph para = doc.createParagraph();

		// Create a run within the paragraph 
		XWPFRun run = para.createRun();

		run.setFontSize(24);
		para.setAlignment(ParagraphAlignment.CENTER);

		run.addBreak();
		run.addBreak();
		run.addBreak();
		run.addBreak();
		run.addBreak();
		run.addBreak();
		run.addBreak();
		run.addBreak();
		run.addBreak();
		run.setFontFamily("Times New Roman");

		// Add text to the run
		run.setText(title);
	}

	public void CompileContributors(XWPFDocument doc) {

		int runTime = 24;
		String[] contributors_ = contributors.split(", ");

		// Create a paragraph
		XWPFParagraph para = doc.createParagraph();

		// Create a run within the paragraph 
		XWPFRun run = para.createRun();

		run.setFontSize(12);
		para.setAlignment(ParagraphAlignment.RIGHT);

		for (int a = 0; a < contributors_.length; a++) {
			runTime--;
		}

		for (int i = 0; i < runTime; i++) {
			run.addBreak();
		}

		run.setFontFamily("Times New Roman");

		for (int i = 0; i < contributors_.length; i++) {

			run.setText(contributors_[i]);
			run.addBreak();
		}
	}

	public void CompileParagraph(XWPFDocument doc, String paragraph) {

		// Split the input string into paragraphs
		String[] paragraphs = paragraph.split("\n\n");

		for (int i = 0; i < paragraphs.length; i++) {

			// Create a new paragraph for each segment
			XWPFParagraph para = doc.createParagraph();

			// Create a run within the paragraph
			XWPFRun run = para.createRun();
			run.setFontFamily("Times New Roman");

			// Add text to the run
			run.setText(paragraphs[i]);

			run.addBreak();

		}

	}

	public void CompileTable(XWPFDocument doc, String[][] tableData, int row, int col) {

		// create table
		XWPFTable table = doc.createTable();

		if (row >= 1) {

			// create first row
			XWPFTableRow tableRowOne = table.getRow(0);
			tableRowOne.getCell(0).setText(tableData[0][0]);

			for (int i = 1; i < col; i++) {
				tableRowOne.addNewTableCell().setText(tableData[0][i]);
			}
		}

		if (row >= 2) {
			// create second row
			XWPFTableRow tableRowTwo = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowTwo.getCell(i).setText(tableData[1][i]);
			}

		}

		if (row >= 3) {
			// create third row
			XWPFTableRow tableRowThree = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowThree.getCell(i).setText(tableData[2][i]);
			}
		}

		if (row >= 4) {
			// create fourth row
			XWPFTableRow tableRowFour = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowFour.getCell(i).setText(tableData[3][i]);
			}
		}

		if (row >= 5) {
			// create third row
			XWPFTableRow tableRowFive = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowFive.getCell(i).setText(tableData[4][i]);
			}
		}

		if (row >= 6) {
			// create third row
			XWPFTableRow tableRowSix = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowSix.getCell(i).setText(tableData[5][i]);
			}
		}

		if (row >= 7) {
			// create third row
			XWPFTableRow tableRowSeven = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowSeven.getCell(i).setText(tableData[6][i]);
			}
		}

		if (row >= 8) {
			// create third row
			XWPFTableRow tableRowEight = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowEight.getCell(i).setText(tableData[7][i]);
			}
		}

		if (row >= 9) {
			// create third row
			XWPFTableRow tableRowNine = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowNine.getCell(i).setText(tableData[8][i]);
			}
		}

		if (row >= 10) {
			// create third row
			XWPFTableRow tableRowTen = table.createRow();

			for (int i = 0; i < col; i++) {
				tableRowTen.getCell(i).setText(tableData[9][i]);
			}
		}
	}

	public void CompileTable(XWPFDocument document, CreateTable table) {

		if (table != null) {

			// sets row and col length parameters
			r = table.row;
			c = table.col;

			CompileTable(document, table.data, r, c);

		}

		// Used to create one new line underneath each table for formatting
		@SuppressWarnings("unused")
		XWPFParagraph para = document.createParagraph();

	}

	public void CreateHeading(XWPFDocument document, String name) {

		// Create a paragraph
		XWPFParagraph para = document.createParagraph();

		// Create a run within the paragraph 
		XWPFRun run = para.createRun();
		run.setFontFamily("Times New Roman");
		run.setBold(true);

		run.setFontSize(12);
		run.setText(name);
		run.addBreak();

	}

	public void CompileCitations(XWPFDocument document) {

		// Split the input string into paragraphs
		String[] citations_ = citations.input.split("\n\n");

		for (int i = 0; i < citations_.length; i++) {

			// Create a new paragraph for each segment
			XWPFParagraph para = document.createParagraph();

			// Create a run within the paragraph
			XWPFRun run = para.createRun();
			run.setFontFamily("Times New Roman");
			run.setItalic(true);

			// Add text to the run
			run.setText(citations_[i]);

			run.addBreak();

		}

	}

	public void ResetSelected() {

		for (int i = 0; i < selected.length; i++) {
			selected[i] = false;
		}

	}

	@Override
	public void actionPerformed(ActionEvent e) {

		// returns to main menu
		if (e.getSource() == return_) {

			HideWindow();
			menu.ShowWindow();

		} else if (e.getSource() == data_) {
			ResetSelected();
			dataSelect = true;
			analysisSelect = false;
			unorderedSelect = false;

		} else if (e.getSource() == analysis_) {
			ResetSelected();
			dataSelect = false;
			analysisSelect = true;
			unorderedSelect = false;

		} else if (e.getSource() == unordered_) {
			ResetSelected();
			dataSelect = false;
			analysisSelect = false;
			unorderedSelect = true;
		}

		else if (e.getSource() == table1_) {
			ResetSelected();
			selected[0] = true;
			title_.setText(table1.title);
		}

		else if (e.getSource() == table2_) {
			ResetSelected();
			selected[1] = true;
			title_.setText(table2.title);
		}

		else if (e.getSource() == table3_) {
			ResetSelected();
			selected[2] = true;
			title_.setText(table3.title);
		}

		else if (e.getSource() == table4_) {
			ResetSelected();
			selected[3] = true;
			title_.setText(table4.title);
		}

		else if (e.getSource() == table5_) {
			ResetSelected();
			selected[4] = true;
			title_.setText(table5.title);
		}

		else if (e.getSource() == table6_) {
			ResetSelected();
			selected[5] = true;
			title_.setText(table6.title);
		}

		else if (e.getSource() == table7_) {
			ResetSelected();
			selected[6] = true;
			title_.setText(table7.title);
		}

		else if (e.getSource() == table8_) {
			ResetSelected();
			selected[7] = true;
			title_.setText(table8.title);
		}

		else if (e.getSource() == para1_) {
			ResetSelected();
			selected[8] = true;
			title_.setText(para1.title);
		}

		else if (e.getSource() == para2_) {
			ResetSelected();
			selected[9] = true;
			title_.setText(para2.title);
		}

		else if (e.getSource() == para3_) {
			ResetSelected();
			selected[10] = true;
			title_.setText(para3.title);
		}

		else if (e.getSource() == para4_) {
			ResetSelected();
			selected[11] = true;
			title_.setText(para4.title);
		}

		else if (e.getSource() == para5_) {
			ResetSelected();
			selected[12] = true;
			title_.setText(para5.title);
		}

		else if (e.getSource() == para6_) {
			ResetSelected();
			selected[13] = true;
			title_.setText(para6.title);
		}

		else if (e.getSource() == para7_) {
			ResetSelected();
			selected[14] = true;
			title_.setText(para7.title);
		}

		else if (e.getSource() == para8_) {
			ResetSelected();
			selected[15] = true;
			title_.setText(para8.title);
		}

		else if (e.getSource() == download_) {

			try {
				// Create a new Word document
				XWPFDocument document = new XWPFDocument();

				CompileTitlePage(document);
				CompileContributors(document);

				document.createParagraph().createRun().addBreak();

				CreateHeading(document, "I. Abstract");

				CompileParagraph(document, abstract_.input);

				CreateHeading(document, "II. Theory");

				CreateHeading(document, "III. Method");

				CompileParagraph(document, method.input);

				CreateHeading(document, "IV. Data");

				OrderCompile(document, dSection);

				CreateHeading(document, "V. Analysis");

				OrderCompile(document, aSection);

				CreateHeading(document, "VI. Sources of Error");

				CompileParagraph(document, sourcesoferror.input);

				CreateHeading(document, "VII. Conclusion");

				CompileParagraph(document, conclusion.input);

				CreateHeading(document, "VIII. Sources");

				CompileCitations(document);

				// Specify the output file path in the Downloads folder
				String home = System.getProperty("user.home");
				String filePath = home + "/Downloads/Lab Report.docx";

				// Create a FileOutputStream to write the document to a file
				try (FileOutputStream out = new FileOutputStream(filePath)) {

					// Write the document to the file
					document.write(out);
				}

			} catch (IOException ex) {
				ex.printStackTrace();
			}

			// ends program
			System.exit(0);

		}

		if (dataSelect == true) {
			data_.setBackground(Color.cyan);
		} else {
			data_.setBackground(Color.white);
		}

		if (analysisSelect == true) {
			analysis_.setBackground(Color.cyan);
		} else {
			analysis_.setBackground(Color.white);
		}

		CheckSelected(table1_, 0);
		CheckSelected(table2_, 1);
		CheckSelected(table3_, 2);
		CheckSelected(table4_, 3);
		CheckSelected(table5_, 4);
		CheckSelected(table6_, 5);
		CheckSelected(table7_, 6);
		CheckSelected(table8_, 7);

		CheckSelected(para1_, 8);
		CheckSelected(para2_, 9);
		CheckSelected(para3_, 10);
		CheckSelected(para4_, 11);
		CheckSelected(para5_, 12);
		CheckSelected(para6_, 13);
		CheckSelected(para7_, 14);
		CheckSelected(para8_, 15);
	}

	public void OrderCompile(XWPFDocument document, String[] array) {

		for (int i = 0; i < array.length; i++) {
			if (array[i] == "Table 1") {
				CompileTable(document, table1);
			} else if (array[i] == "Table 2") {
				CompileTable(document, table2);
			} else if (array[i] == "Table 3") {
				CompileTable(document, table3);
			} else if (array[i] == "Table 4") {
				CompileTable(document, table4);
			} else if (array[i] == "Table 5") {
				CompileTable(document, table5);
			} else if (array[i] == "Table 6") {
				CompileTable(document, table6);
			} else if (array[i] == "Table 7") {
				CompileTable(document, table7);
			} else if (array[i] == "Table 8") {
				CompileTable(document, table8);
			} else if (array[i] == "Para 1") {
				CompileParagraph(document, para1.input);
			} else if (array[i] == "Para 2") {
				CompileParagraph(document, para2.input);
			} else if (array[i] == "Para 3") {
				CompileParagraph(document, para3.input);
			} else if (array[i] == "Para 4") {
				CompileParagraph(document, para4.input);
			} else if (array[i] == "Para 5") {
				CompileParagraph(document, para5.input);
			} else if (array[i] == "Para 6") {
				CompileParagraph(document, para6.input);
			} else if (array[i] == "Para 7") {
				CompileParagraph(document, para7.input);
			} else if (array[i] == "Para 8") {
				CompileParagraph(document, para8.input);
			}

		}

	}

	public boolean AlrInSection(String[] array, JButton button) {

		for (int i = 0; i < array.length; i++) {
			if (array[i] == button.getText()) {
				return true;
			}
		}

		return false;

	}

	public void CheckSelected(JButton button, int index) {

		int indexTwo = 0;

		if (dataSelect && selected[index] && !AlrInSection(dSection, button)) {

			for (int i = 0; i < dSection.length; i++) {
				if (dSection[i] == null) {
					indexTwo = i;
					break;
				}
			}

			for (int i = 0; i < aSection.length; i++) {
				if (aSection[i] == button.getText()) {
					aSection[i] = null;
				}
			}

			button.setLocation(d[indexTwo]);
			dSection[indexTwo] = button.getText();
		}

		if (analysisSelect && selected[index] && !AlrInSection(aSection, button)) {

			for (int i = 0; i < aSection.length; i++) {
				if (aSection[i] == null) {
					indexTwo = i;
					break;
				}
			}

			for (int i = 0; i < dSection.length; i++) {
				if (dSection[i] == button.getText()) {
					dSection[i] = null;
				}
			}

			button.setLocation(a[indexTwo]);
			aSection[indexTwo] = button.getText();
		}

		if (unorderedSelect && selected[index]) {

			button.setLocation(u[index]);

			for (int i = 0; i < dSection.length; i++) {
				if (dSection[i] == button.getText()) {
					dSection[i] = null;
				}
			}

			for (int i = 0; i < aSection.length; i++) {
				if (aSection[i] == button.getText()) {
					aSection[i] = null;
				}
			}

		}

	}

}
